* {
  box-sizing: border-box;
}

body {
  font-family: Arial;
  margin: 0;
}


header {
  padding: 40px;
  text-align: left;
  background: black;
  color: #fff;
}

header span{
    background-color: grey;
}

.section-title{
    font-size: 50px;
    padding-right: 1rem;
}

/* 
What happens when we set the display property to flex?
The flex container becomes flexible 
*/
nav {
  display: flex;
  flex-wrap:flex;
  text-align:center;
  justify-content:space-between;
  align-items:center;
}

nav .nav-links{
  display:flex;
}

nav .title{
  text-decoration:none;
  font-size:2.5rem;
  padding: 5px 10px 5px 0;
}

nav a {
  color: white;
  padding: 14px 20px;
  text-decoration: underline;
  display:block;
  padding:15px 15px;

}



nav a:hover{
  text-decoration: none;
  transform: scale(1.25);
}

.about{
  display:flex;
  justify-content:space-between;
  align-items:center;
  padding:15px;
  padding-bottom: 5px;
  
}

.section-content{
    padding: 3rem;
    border-left: 5px solid black;
}
.work{
  justify-content:space-between;
  align-items:top;
  margin-top:0;
}


/* 
What is the flex-wrap property?
It specifies whether the flex items should wrap or not 
*/
main {
  display: flex;
  flex-wrap: wrap;
}

main img{
    height: 350px;
    
}

aside {
  flex: 1;
  background-color: #b9c6ae;
  padding: 80px;
  text-align: center;
}

footer {
  padding: 20px;
  text-align: center;
  background: black;
  color: #fff;
}
.hero {
  background-image: url("../images/banner.jpeg");
  height: 600px;
  width: 100%;
  background-size: auto;
  background-position: center;
  border: 3px solid gray;
}

.hero h2{
    float: right;
    margin-top: 30%;
    margin-right: 5%;
    background-color: grey;
}

.hero img{
    border: 5px solid gray
}

.work-title{
  font-size: 50px;
  text-align:center;
  text-decoration: underline;
}



.mainProject{
  flex: 4;
  display:flex;
  flex-wrap: wrap;
  align-items:center;
  justify-content:center;
}

.projects {
  flex: 4;
  background-color: #fff;
  padding-left: 6rem;
  padding-right: 6.5rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  align-items:top;
}




.images{
  padding-left:5rem;
}

.mainProject{
    flex: 4;
    background-color: #fff;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items:top;
}

.mainProject:hover{
    transform: scale(1.10);
}

.card {
  padding: 10px;
  flex: 0 0 600px;
  position: relative;
}

.card:hover{
    transform: scale(1.1);
}
.card p {
  text-align: left;
}

.card img {
  width: 100%;
}

.mainCard {
  padding: 10px;
  flex: 0 0 1300px;
  position: relative;
}
.mainCard a {
  text-decoration:none;
  color: black;
}
.mainCard p {
  text-align: left;
  font-size: 1rem;;
}

.mainCard img {
  width: 100%;
}

.text {
  position: absolute;
  bottom: 2rem;
  left: 1rem;
  background: white;
  padding-left: 6%;
}

.mainText {
  
  position: relative;
  bottom: 9rem;
  left: 2rem;
  background: white;
  padding-left: 6%;
  max-width: 15rem;
  font-size: 1.5rem;
}

/* 
What does the flex-direction property define?
It defines in which direction the container wants to stack the flex items
What is it doing here? 
We are telling the main body and navbar to stack vertically in a column
*/
@media screen and (max-width: 768px) {
  main,
  nav {
    flex-direction: column;
  }
  .mainText {
    left: 25rem;
  }
}
